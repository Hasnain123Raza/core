{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Coming soon","title":"Introduction"},{"location":"changelog/","text":"Coming soon","title":"Changelog"},{"location":"contributing/","text":"Coming soon include bug and feature requests etc","title":"Contributing"},{"location":"features/","text":"Coming soon","title":"Features"},{"location":"installation/","text":"Coming soon","title":"Installation"},{"location":"resources/","text":"Coming soon","title":"Resources"},{"location":"api/icon/","text":"Construtors \u00b6 new \u00b6 local icon = Icon . new () Constructs an empty 32x32 icon on the topbar. mimic \u00b6 {unstable} local icon = Icon . mimic ( coreIconName ) Constructs an icon to replace its CoreGui equivalent and accurately mimic its behaviour. This allows for the persistence of core gui items (such as the chatbar, leaderboard, emotes, etc) while having full control over the appearance and behaviour of the icon to toggle it. Mimicable Items: \"PlayerList\" , \"Backpack\" , \"Chat\" , \"EmotesMenu\" Danger Due to recent unannounced changes Roblox have completely restricted the ability to accurately mimic core items such as Chat. Until this is resolved the mimic constructor will not work as intended. Methods \u00b6 set \u00b6 {chainable} icon : set ( settingName , value , toggleState ) Applies a specific setting to an icon. All settings can be found here . If the setting falls under the 'toggleable' category then \"deselected\" or \"selected\" can be specified, otherwise if left empty or nil will apply to both states. For most scenarious, it's recommended instead to apply settings using themes . get \u00b6 local value = icon : get ( settingName , toggleState ) Retrieves the given settings value. If the setting falls under the 'toggleable' category then \"deselected\" or \"selected\" can be specified, otherwise if left empty or nil will default to retrieving the deselected value. getToggleState \u00b6 local selectedOrDeselectedString = icon : getToggleState () Returns the current toggleState, either \"deselected\" or \"selected\". setTheme \u00b6 {chainable} icon : setTheme ( theme ) Applies a theme to the given icon. See themes for more information. setEnabled \u00b6 {chainable} icon : setEnabled ( bool ) When set to false , the icon will be disabled and hidden. setName \u00b6 {chainable} icon : setName ( string ) Associates the given name to the icon which enables it to be retrieved with IconController.getIcon(name) . select \u00b6 {chainable} icon : select () Selects the icon (as if it were clicked once). deselect \u00b6 {chainable} icon : deselect () Deselects the icon (as if it were clicked, then clicked again). notify \u00b6 {chainable} icon : notify ( clearNoticeEvent ) Prompts a notice bubble which accumulates the further it is prompted. If the icon belongs to a dropdown or menu, then the notice will appear on the parent icon when the parent icon is deselected. clearNotices \u00b6 {chainable} icon : clearNotices () disableStateOverlay \u00b6 {chainable} icon : disableStateOverlay ( bool ) When set to true , disables the shade effect which appears when the icon is pressed and released. setImage \u00b6 {chainable} {toggleable} icon : setImage ( imageId , toggleState ) Applies an image to the icon based on the given imaageId . imageId can be an assetId or a complete asset string. setLabel \u00b6 {chainable} {toggleable} icon : setLabel ( text , toggleState ) setOrder \u00b6 {chainable} {toggleable} icon : setOrder ( order , toggleState ) setCornerRadius \u00b6 {chainable} {toggleable} icon : setCornerRadius ( scale , offset , toggleState ) setLeft \u00b6 {chainable} {toggleable} icon : setLeft ( toggleState ) setMid \u00b6 {chainable} {toggleable} icon : setMid ( toggleState ) setRight \u00b6 {chainable} {toggleable} icon : setRight ( toggleState ) setImageYScale \u00b6 {chainable} {toggleable} icon : setImageYScale ( YScale , toggleState ) Defines the proportional space the icons image takes up within the icons container. setImageRatio \u00b6 {chainable} {toggleable} icon : setImageRatio ( ratio , toggleState ) Defines the x:y ratio dimensions as a number. By default ratio is 1.00 . setLabelYScale \u00b6 {chainable} {toggleable} icon : setLabelYScale ( YScale , toggleState ) Defines how large label text appears.By default YScale is 0.45 . setBaseZIndex \u00b6 {chainable} {toggleable} icon : setBaseZIndex ( ZIndex , toggleState ) Calculates the difference between the existing baseZIndex (i.e. instances.iconContainer.ZIndex ) and new value, then updates the ZIndex of all objects within the icon accoridngly using this difference. setSize \u00b6 {chainable} {toggleable} icon : setSize ( XOffset , YOffset , toggleState ) Determines the icons container size. By default XOffset and YOffset are 32 . bindToggleItem \u00b6 {chainable} icon : bindToggleItem ( guiObjectOrLayerCollector ) Binds a GuiObject or LayerCollector to appear and disappeared when the icon is toggled. unbindToggleItem \u00b6 {chainable} icon : unbindToggleItem ( guiObjectOrLayerCollector ) Unbinds the given GuiObject or LayerCollector from the toggle. bindEvent \u00b6 {chainable} icon : bindEvent ( iconEventName , eventFunction ) Connects to an icon event based upon the given iconEventName and call eventFunction with arguments (self, ...) when the event is triggered. unbindEvent \u00b6 {chainable} icon : unbindEvent ( iconEventName ) Unbinds the connection of the associated iconEventName . bindToggleKey \u00b6 {chainable} icon : bindToggleKey ( keyCodeEnum ) Binds a keycode which toggles the icon when pressed. unbindToggleKey \u00b6 {chainable} icon : unbindToggleKey ( keyCodeEnum ) Unbinds the given keycode. lock \u00b6 {chainable} icon : lock () Prevents the icon from being pressed and toggled. unlock \u00b6 {chainable} icon : unlock () Enables the icon to be pressed and toggled. setTopPadding \u00b6 {chainable} icon : setTopPadding ( offset , scale ) The gap between the top of the screen and the icon. setTip \u00b6 {chainable} icon : setTip ( text ) Sets a tip. To remove, pass nil as text . setCaption \u00b6 {chainable} icon : setCaption ( text ) Sets a caption. To remove, pass nil as text . join \u00b6 {chainable} icon : join ( parentIcon , featureName ) Parents the icon to the given parentIcon under the specified feature, either \"dropdown\" or \"menu\". leave \u00b6 {chainable} icon : leave () Unparents an icon from a parentIcon if it belongs to a dropdown or menu. setDropdown \u00b6 {chainable} icon : setDropdown ( arrayOfIcons ) Creates a vertical dropdown based upon the given table array of icons . Pass an empty table {} to remove the dropdown. Dropdown settings can be configured using themes or the set method . setMenu \u00b6 {chainable} icon : setMenu ( arrayOfIcons ) Creates a horizontal menu based upon the given table array of icons . Pass an empty table {} to remove the menu. Menu settings can be configured using themes or the set method . destroy \u00b6 {chainable} icon : destroy () Clears all connections and destroys all instances associated with the icon. Events \u00b6 selected \u00b6 icon . selected : Connect ( function () print ( \"The icon was selected\" ) end ) deselected \u00b6 icon . deselected : Connect ( function () print ( \"The icon was deselected\" ) end ) toggled \u00b6 icon . toggled : Connect ( function ( isSelected ) print (( \"The icon was %s\" ): format ( icon : getToggleState ( isSelected ))) end ) hoverStarted \u00b6 icon . hoverStarted : Connect ( function () print ( \"A mouse, finger or controller selection is hovering over the icon\" ) end ) hoverEnded \u00b6 icon . hoverEnded : Connect ( function () print ( \"The item is no longer hovering over the icon\" ) end ) dropdownOpened \u00b6 icon . dropdownOpened : Connect ( function () print ( \"The dropdown was opened\" ) end ) dropdownClosed \u00b6 icon . dropdownClosed : Connect ( function () print ( \"The dropdown was closed\" ) end ) menuOpened \u00b6 icon . menuOpened : Connect ( function () print ( \"The menu was opened\" ) end ) menuClosed \u00b6 icon . menuClosed : Connect ( function () print ( \"The menu was closed\" ) end ) notified \u00b6 icon . notified : Connect ( function () print ( \"New notice\" ) end ) Properties \u00b6 deselectWhenOtherIconSelected \u00b6 local bool = icon . deselectWhenOtherIconSelected --[default: 'true'] A bool deciding whether the icon will be deselected when another icon is selected. Defaults to true . accountForWhenDisabled \u00b6 local bool = icon . accountForWhenDisabled --[default: 'false'] A bool deciding whether to continue accounting for and updating the icons position on the topbar when disabled name \u00b6 {read-only} local string = icon . name --[default: '\"Unnamed Icon\"'] isSelected \u00b6 {read-only} local bool = icon . isSelected enabled \u00b6 {read-only} local bool = icon . enabled hovering \u00b6 {read-only} local bool = icon . hovering tipText \u00b6 {read-only} local stringOrNil = icon . tipText captionText \u00b6 {read-only} local stringOrNil = icon . captionText totalNotices \u00b6 {read-only} local int = icon . totalNotices dropdownIcons \u00b6 {read-only} local arrayOfIcons = icon . dropdownIcons menuIcons \u00b6 {read-only} local arrayOfIcons = icon . menuIcons dropdownOpen \u00b6 {read-only} local bool = icon . dropdownOpen menuOpen \u00b6 {read-only} local bool = icon . menuOpen locked \u00b6 {read-only} local bool = icon . locked topPadding \u00b6 {read-only} local udim = icon . topPadding targetPosition \u00b6 {read-only} local udim2 = icon . targetPosition The position the icon is at or aims to move to.","title":"Icon"},{"location":"api/icon/#construtors","text":"","title":"Construtors"},{"location":"api/icon/#new","text":"local icon = Icon . new () Constructs an empty 32x32 icon on the topbar.","title":"new"},{"location":"api/icon/#mimic","text":"{unstable} local icon = Icon . mimic ( coreIconName ) Constructs an icon to replace its CoreGui equivalent and accurately mimic its behaviour. This allows for the persistence of core gui items (such as the chatbar, leaderboard, emotes, etc) while having full control over the appearance and behaviour of the icon to toggle it. Mimicable Items: \"PlayerList\" , \"Backpack\" , \"Chat\" , \"EmotesMenu\" Danger Due to recent unannounced changes Roblox have completely restricted the ability to accurately mimic core items such as Chat. Until this is resolved the mimic constructor will not work as intended.","title":"mimic"},{"location":"api/icon/#methods","text":"","title":"Methods"},{"location":"api/icon/#set","text":"{chainable} icon : set ( settingName , value , toggleState ) Applies a specific setting to an icon. All settings can be found here . If the setting falls under the 'toggleable' category then \"deselected\" or \"selected\" can be specified, otherwise if left empty or nil will apply to both states. For most scenarious, it's recommended instead to apply settings using themes .","title":"set"},{"location":"api/icon/#get","text":"local value = icon : get ( settingName , toggleState ) Retrieves the given settings value. If the setting falls under the 'toggleable' category then \"deselected\" or \"selected\" can be specified, otherwise if left empty or nil will default to retrieving the deselected value.","title":"get"},{"location":"api/icon/#gettogglestate","text":"local selectedOrDeselectedString = icon : getToggleState () Returns the current toggleState, either \"deselected\" or \"selected\".","title":"getToggleState"},{"location":"api/icon/#settheme","text":"{chainable} icon : setTheme ( theme ) Applies a theme to the given icon. See themes for more information.","title":"setTheme"},{"location":"api/icon/#setenabled","text":"{chainable} icon : setEnabled ( bool ) When set to false , the icon will be disabled and hidden.","title":"setEnabled"},{"location":"api/icon/#setname","text":"{chainable} icon : setName ( string ) Associates the given name to the icon which enables it to be retrieved with IconController.getIcon(name) .","title":"setName"},{"location":"api/icon/#select","text":"{chainable} icon : select () Selects the icon (as if it were clicked once).","title":"select"},{"location":"api/icon/#deselect","text":"{chainable} icon : deselect () Deselects the icon (as if it were clicked, then clicked again).","title":"deselect"},{"location":"api/icon/#notify","text":"{chainable} icon : notify ( clearNoticeEvent ) Prompts a notice bubble which accumulates the further it is prompted. If the icon belongs to a dropdown or menu, then the notice will appear on the parent icon when the parent icon is deselected.","title":"notify"},{"location":"api/icon/#clearnotices","text":"{chainable} icon : clearNotices ()","title":"clearNotices"},{"location":"api/icon/#disablestateoverlay","text":"{chainable} icon : disableStateOverlay ( bool ) When set to true , disables the shade effect which appears when the icon is pressed and released.","title":"disableStateOverlay"},{"location":"api/icon/#setimage","text":"{chainable} {toggleable} icon : setImage ( imageId , toggleState ) Applies an image to the icon based on the given imaageId . imageId can be an assetId or a complete asset string.","title":"setImage"},{"location":"api/icon/#setlabel","text":"{chainable} {toggleable} icon : setLabel ( text , toggleState )","title":"setLabel"},{"location":"api/icon/#setorder","text":"{chainable} {toggleable} icon : setOrder ( order , toggleState )","title":"setOrder"},{"location":"api/icon/#setcornerradius","text":"{chainable} {toggleable} icon : setCornerRadius ( scale , offset , toggleState )","title":"setCornerRadius"},{"location":"api/icon/#setleft","text":"{chainable} {toggleable} icon : setLeft ( toggleState )","title":"setLeft"},{"location":"api/icon/#setmid","text":"{chainable} {toggleable} icon : setMid ( toggleState )","title":"setMid"},{"location":"api/icon/#setright","text":"{chainable} {toggleable} icon : setRight ( toggleState )","title":"setRight"},{"location":"api/icon/#setimageyscale","text":"{chainable} {toggleable} icon : setImageYScale ( YScale , toggleState ) Defines the proportional space the icons image takes up within the icons container.","title":"setImageYScale"},{"location":"api/icon/#setimageratio","text":"{chainable} {toggleable} icon : setImageRatio ( ratio , toggleState ) Defines the x:y ratio dimensions as a number. By default ratio is 1.00 .","title":"setImageRatio"},{"location":"api/icon/#setlabelyscale","text":"{chainable} {toggleable} icon : setLabelYScale ( YScale , toggleState ) Defines how large label text appears.By default YScale is 0.45 .","title":"setLabelYScale"},{"location":"api/icon/#setbasezindex","text":"{chainable} {toggleable} icon : setBaseZIndex ( ZIndex , toggleState ) Calculates the difference between the existing baseZIndex (i.e. instances.iconContainer.ZIndex ) and new value, then updates the ZIndex of all objects within the icon accoridngly using this difference.","title":"setBaseZIndex"},{"location":"api/icon/#setsize","text":"{chainable} {toggleable} icon : setSize ( XOffset , YOffset , toggleState ) Determines the icons container size. By default XOffset and YOffset are 32 .","title":"setSize"},{"location":"api/icon/#bindtoggleitem","text":"{chainable} icon : bindToggleItem ( guiObjectOrLayerCollector ) Binds a GuiObject or LayerCollector to appear and disappeared when the icon is toggled.","title":"bindToggleItem"},{"location":"api/icon/#unbindtoggleitem","text":"{chainable} icon : unbindToggleItem ( guiObjectOrLayerCollector ) Unbinds the given GuiObject or LayerCollector from the toggle.","title":"unbindToggleItem"},{"location":"api/icon/#bindevent","text":"{chainable} icon : bindEvent ( iconEventName , eventFunction ) Connects to an icon event based upon the given iconEventName and call eventFunction with arguments (self, ...) when the event is triggered.","title":"bindEvent"},{"location":"api/icon/#unbindevent","text":"{chainable} icon : unbindEvent ( iconEventName ) Unbinds the connection of the associated iconEventName .","title":"unbindEvent"},{"location":"api/icon/#bindtogglekey","text":"{chainable} icon : bindToggleKey ( keyCodeEnum ) Binds a keycode which toggles the icon when pressed.","title":"bindToggleKey"},{"location":"api/icon/#unbindtogglekey","text":"{chainable} icon : unbindToggleKey ( keyCodeEnum ) Unbinds the given keycode.","title":"unbindToggleKey"},{"location":"api/icon/#lock","text":"{chainable} icon : lock () Prevents the icon from being pressed and toggled.","title":"lock"},{"location":"api/icon/#unlock","text":"{chainable} icon : unlock () Enables the icon to be pressed and toggled.","title":"unlock"},{"location":"api/icon/#settoppadding","text":"{chainable} icon : setTopPadding ( offset , scale ) The gap between the top of the screen and the icon.","title":"setTopPadding"},{"location":"api/icon/#settip","text":"{chainable} icon : setTip ( text ) Sets a tip. To remove, pass nil as text .","title":"setTip"},{"location":"api/icon/#setcaption","text":"{chainable} icon : setCaption ( text ) Sets a caption. To remove, pass nil as text .","title":"setCaption"},{"location":"api/icon/#join","text":"{chainable} icon : join ( parentIcon , featureName ) Parents the icon to the given parentIcon under the specified feature, either \"dropdown\" or \"menu\".","title":"join"},{"location":"api/icon/#leave","text":"{chainable} icon : leave () Unparents an icon from a parentIcon if it belongs to a dropdown or menu.","title":"leave"},{"location":"api/icon/#setdropdown","text":"{chainable} icon : setDropdown ( arrayOfIcons ) Creates a vertical dropdown based upon the given table array of icons . Pass an empty table {} to remove the dropdown. Dropdown settings can be configured using themes or the set method .","title":"setDropdown"},{"location":"api/icon/#setmenu","text":"{chainable} icon : setMenu ( arrayOfIcons ) Creates a horizontal menu based upon the given table array of icons . Pass an empty table {} to remove the menu. Menu settings can be configured using themes or the set method .","title":"setMenu"},{"location":"api/icon/#destroy","text":"{chainable} icon : destroy () Clears all connections and destroys all instances associated with the icon.","title":"destroy"},{"location":"api/icon/#events","text":"","title":"Events"},{"location":"api/icon/#selected","text":"icon . selected : Connect ( function () print ( \"The icon was selected\" ) end )","title":"selected"},{"location":"api/icon/#deselected","text":"icon . deselected : Connect ( function () print ( \"The icon was deselected\" ) end )","title":"deselected"},{"location":"api/icon/#toggled","text":"icon . toggled : Connect ( function ( isSelected ) print (( \"The icon was %s\" ): format ( icon : getToggleState ( isSelected ))) end )","title":"toggled"},{"location":"api/icon/#hoverstarted","text":"icon . hoverStarted : Connect ( function () print ( \"A mouse, finger or controller selection is hovering over the icon\" ) end )","title":"hoverStarted"},{"location":"api/icon/#hoverended","text":"icon . hoverEnded : Connect ( function () print ( \"The item is no longer hovering over the icon\" ) end )","title":"hoverEnded"},{"location":"api/icon/#dropdownopened","text":"icon . dropdownOpened : Connect ( function () print ( \"The dropdown was opened\" ) end )","title":"dropdownOpened"},{"location":"api/icon/#dropdownclosed","text":"icon . dropdownClosed : Connect ( function () print ( \"The dropdown was closed\" ) end )","title":"dropdownClosed"},{"location":"api/icon/#menuopened","text":"icon . menuOpened : Connect ( function () print ( \"The menu was opened\" ) end )","title":"menuOpened"},{"location":"api/icon/#menuclosed","text":"icon . menuClosed : Connect ( function () print ( \"The menu was closed\" ) end )","title":"menuClosed"},{"location":"api/icon/#notified","text":"icon . notified : Connect ( function () print ( \"New notice\" ) end )","title":"notified"},{"location":"api/icon/#properties","text":"","title":"Properties"},{"location":"api/icon/#deselectwhenothericonselected","text":"local bool = icon . deselectWhenOtherIconSelected --[default: 'true'] A bool deciding whether the icon will be deselected when another icon is selected. Defaults to true .","title":"deselectWhenOtherIconSelected"},{"location":"api/icon/#accountforwhendisabled","text":"local bool = icon . accountForWhenDisabled --[default: 'false'] A bool deciding whether to continue accounting for and updating the icons position on the topbar when disabled","title":"accountForWhenDisabled"},{"location":"api/icon/#name","text":"{read-only} local string = icon . name --[default: '\"Unnamed Icon\"']","title":"name"},{"location":"api/icon/#isselected","text":"{read-only} local bool = icon . isSelected","title":"isSelected"},{"location":"api/icon/#enabled","text":"{read-only} local bool = icon . enabled","title":"enabled"},{"location":"api/icon/#hovering","text":"{read-only} local bool = icon . hovering","title":"hovering"},{"location":"api/icon/#tiptext","text":"{read-only} local stringOrNil = icon . tipText","title":"tipText"},{"location":"api/icon/#captiontext","text":"{read-only} local stringOrNil = icon . captionText","title":"captionText"},{"location":"api/icon/#totalnotices","text":"{read-only} local int = icon . totalNotices","title":"totalNotices"},{"location":"api/icon/#dropdownicons","text":"{read-only} local arrayOfIcons = icon . dropdownIcons","title":"dropdownIcons"},{"location":"api/icon/#menuicons","text":"{read-only} local arrayOfIcons = icon . menuIcons","title":"menuIcons"},{"location":"api/icon/#dropdownopen","text":"{read-only} local bool = icon . dropdownOpen","title":"dropdownOpen"},{"location":"api/icon/#menuopen","text":"{read-only} local bool = icon . menuOpen","title":"menuOpen"},{"location":"api/icon/#locked","text":"{read-only} local bool = icon . locked","title":"locked"},{"location":"api/icon/#toppadding","text":"{read-only} local udim = icon . topPadding","title":"topPadding"},{"location":"api/icon/#targetposition","text":"{read-only} local udim2 = icon . targetPosition The position the icon is at or aims to move to.","title":"targetPosition"},{"location":"api/icon_controller/","text":"Functions \u00b6 setGameTheme \u00b6 IconController . setGameTheme ( theme ) Sets the default theme which is applied to all existing and future icons. setDisplayOrder \u00b6 IconController . setDisplayOrder ( number ) Changes the DisplayOrder of the TopbarPlus ScreenGui to the given value. setTopbarEnabled \u00b6 IconController . setTopbarEnabled ( bool ) When set to false , hides all icons created with TopbarPlus. This can also be achieved by calling starterGui:SetCore(\"TopbarEnabled\", false) . setGap \u00b6 IconController . setGap ( integer , alignment ) Defines the offset width (i.e. gap) between each icon for the given alignment, left , mid , right , or all alignments if not specified. getIcons \u00b6 local arrayOfIcons = IconController . getIcons () Returns all icons as an array. getIcon \u00b6 local icon = IconController . getIcon ( name ) Returns the icon with the given name (or false if not found). If multiple icons have the same name, then one will be returned randomly. Properties \u00b6 topbarEnabled \u00b6 {read-only} local bool = IconController . topbarEnabled controllerModeEnabled \u00b6 {read-only} local bool = IconController . controllerModeEnabled leftGap \u00b6 {read-only} local gapNumber = IconController . leftGap --[default: '12'] midGap \u00b6 {read-only} local gapNumber = IconController . midGap --[default: '12'] rightGap \u00b6 {read-only} local gapNumber = IconController . rightGap --[default: '12']","title":"Icon controller"},{"location":"api/icon_controller/#functions","text":"","title":"Functions"},{"location":"api/icon_controller/#setgametheme","text":"IconController . setGameTheme ( theme ) Sets the default theme which is applied to all existing and future icons.","title":"setGameTheme"},{"location":"api/icon_controller/#setdisplayorder","text":"IconController . setDisplayOrder ( number ) Changes the DisplayOrder of the TopbarPlus ScreenGui to the given value.","title":"setDisplayOrder"},{"location":"api/icon_controller/#settopbarenabled","text":"IconController . setTopbarEnabled ( bool ) When set to false , hides all icons created with TopbarPlus. This can also be achieved by calling starterGui:SetCore(\"TopbarEnabled\", false) .","title":"setTopbarEnabled"},{"location":"api/icon_controller/#setgap","text":"IconController . setGap ( integer , alignment ) Defines the offset width (i.e. gap) between each icon for the given alignment, left , mid , right , or all alignments if not specified.","title":"setGap"},{"location":"api/icon_controller/#geticons","text":"local arrayOfIcons = IconController . getIcons () Returns all icons as an array.","title":"getIcons"},{"location":"api/icon_controller/#geticon","text":"local icon = IconController . getIcon ( name ) Returns the icon with the given name (or false if not found). If multiple icons have the same name, then one will be returned randomly.","title":"getIcon"},{"location":"api/icon_controller/#properties","text":"","title":"Properties"},{"location":"api/icon_controller/#topbarenabled","text":"{read-only} local bool = IconController . topbarEnabled","title":"topbarEnabled"},{"location":"api/icon_controller/#controllermodeenabled","text":"{read-only} local bool = IconController . controllerModeEnabled","title":"controllerModeEnabled"},{"location":"api/icon_controller/#leftgap","text":"{read-only} local gapNumber = IconController . leftGap --[default: '12']","title":"leftGap"},{"location":"api/icon_controller/#midgap","text":"{read-only} local gapNumber = IconController . midGap --[default: '12']","title":"midGap"},{"location":"api/icon_controller/#rightgap","text":"{read-only} local gapNumber = IconController . rightGap --[default: '12']","title":"rightGap"},{"location":"api/module/","text":"Coming soon","title":"Module"},{"location":"api/zone/","text":"Construtors \u00b6 new \u00b6 local zone = Zone . new ( group ) A group is used the define the boundaries of the zone. It can be any non-basepart instance (such as a Model, Folder, etc) that contain descendant baseparts. Alternatively a group can be a singular basepart instance, or a table containing an array of baseparts. Methods \u00b6 findLocalPlayer \u00b6 local isWithinZoneBool = zone : findLocalPlayer () findPlayer \u00b6 local isWithinZoneBool = zone : findPlayer ( player ) findPart \u00b6 local isWithinZoneBool = zone : findPart ( basePart ) getPlayers \u00b6 local playersArray = zone : getPlayers () getParts \u00b6 local partsArray = zone : getParts () getRandomPoint \u00b6 local randomVector , touchingGroupPartsArray = zone : getRandomPoint () Generates random points within the zones region until one falls within its bounds. It then returns this Vector3 and a table array of group parts the point falls within. setAccuracy \u00b6 zone : setAccuracy ( enumIdOrName ) Sets the frequency of checks based upon the Accuracy Enum . destroy \u00b6 zone : destroy () Disconnects all connections within the zone. Events \u00b6 localPlayerEntered \u00b6 {client-only} zone . localPlayerEntered : Connect ( function () print ( \"you entered the zone!\" ) end ) localPlayerExited \u00b6 {client-only} zone . localPlayerExited : Connect ( function () print ( \"you exited the zone!\" ) end ) playerEntered \u00b6 zone . playerEntered : Connect ( function ( player ) print (( \"player '%s' entered the zone!\" ): format ( player . Name )) end ) playerExited \u00b6 zone . playerExited : Connect ( function ( player ) print (( \"player '%s' exited the zone!\" ): format ( player . Name )) end ) partEntered \u00b6 zone . partEntered : Connect ( function ( part ) print (( \"part '%s' entered the zone!\" ): format ( part . Name )) end ) Warning This connection will not fully optimise until BasePart.CanTouch goes live . partExited \u00b6 zone . partExited : Connect ( function ( part ) print (( \"part '%s' exited the zone!\" ): format ( part . Name )) end ) Warning This connection will not fully optimise until BasePart.CanTouch goes live . Properties \u00b6 accuracy \u00b6 local accuracyEnumId = zone . accuracy --[default: 'Enum.enums.Accuracy.High'] To change accuracy it's recommended you use setAccuracy . autoUpdate \u00b6 local bool = zone . autoUpdate --[default: 'true'] When true , the zone will update when its group parts change size or position, or when a descendant group part is added or removed from the group. respectUpdateQueue \u00b6 local bool = zone . respectUpdateQueue --[default: 'true'] When true , will prevent the internal _update() from being called multiple times within a 0.1 second period. region \u00b6 {read-only} volume \u00b6 {read-only}","title":"Zone"},{"location":"api/zone/#construtors","text":"","title":"Construtors"},{"location":"api/zone/#new","text":"local zone = Zone . new ( group ) A group is used the define the boundaries of the zone. It can be any non-basepart instance (such as a Model, Folder, etc) that contain descendant baseparts. Alternatively a group can be a singular basepart instance, or a table containing an array of baseparts.","title":"new"},{"location":"api/zone/#methods","text":"","title":"Methods"},{"location":"api/zone/#findlocalplayer","text":"local isWithinZoneBool = zone : findLocalPlayer ()","title":"findLocalPlayer"},{"location":"api/zone/#findplayer","text":"local isWithinZoneBool = zone : findPlayer ( player )","title":"findPlayer"},{"location":"api/zone/#findpart","text":"local isWithinZoneBool = zone : findPart ( basePart )","title":"findPart"},{"location":"api/zone/#getplayers","text":"local playersArray = zone : getPlayers ()","title":"getPlayers"},{"location":"api/zone/#getparts","text":"local partsArray = zone : getParts ()","title":"getParts"},{"location":"api/zone/#getrandompoint","text":"local randomVector , touchingGroupPartsArray = zone : getRandomPoint () Generates random points within the zones region until one falls within its bounds. It then returns this Vector3 and a table array of group parts the point falls within.","title":"getRandomPoint"},{"location":"api/zone/#setaccuracy","text":"zone : setAccuracy ( enumIdOrName ) Sets the frequency of checks based upon the Accuracy Enum .","title":"setAccuracy"},{"location":"api/zone/#destroy","text":"zone : destroy () Disconnects all connections within the zone.","title":"destroy"},{"location":"api/zone/#events","text":"","title":"Events"},{"location":"api/zone/#localplayerentered","text":"{client-only} zone . localPlayerEntered : Connect ( function () print ( \"you entered the zone!\" ) end )","title":"localPlayerEntered"},{"location":"api/zone/#localplayerexited","text":"{client-only} zone . localPlayerExited : Connect ( function () print ( \"you exited the zone!\" ) end )","title":"localPlayerExited"},{"location":"api/zone/#playerentered","text":"zone . playerEntered : Connect ( function ( player ) print (( \"player '%s' entered the zone!\" ): format ( player . Name )) end )","title":"playerEntered"},{"location":"api/zone/#playerexited","text":"zone . playerExited : Connect ( function ( player ) print (( \"player '%s' exited the zone!\" ): format ( player . Name )) end )","title":"playerExited"},{"location":"api/zone/#partentered","text":"zone . partEntered : Connect ( function ( part ) print (( \"part '%s' entered the zone!\" ): format ( part . Name )) end ) Warning This connection will not fully optimise until BasePart.CanTouch goes live .","title":"partEntered"},{"location":"api/zone/#partexited","text":"zone . partExited : Connect ( function ( part ) print (( \"part '%s' exited the zone!\" ): format ( part . Name )) end ) Warning This connection will not fully optimise until BasePart.CanTouch goes live .","title":"partExited"},{"location":"api/zone/#properties","text":"","title":"Properties"},{"location":"api/zone/#accuracy","text":"local accuracyEnumId = zone . accuracy --[default: 'Enum.enums.Accuracy.High'] To change accuracy it's recommended you use setAccuracy .","title":"accuracy"},{"location":"api/zone/#autoupdate","text":"local bool = zone . autoUpdate --[default: 'true'] When true , the zone will update when its group parts change size or position, or when a descendant group part is added or removed from the group.","title":"autoUpdate"},{"location":"api/zone/#respectupdatequeue","text":"local bool = zone . respectUpdateQueue --[default: 'true'] When true , will prevent the internal _update() from being called multiple times within a 0.1 second period.","title":"respectUpdateQueue"},{"location":"api/zone/#region","text":"{read-only}","title":"region"},{"location":"api/zone/#volume","text":"{read-only}","title":"volume"},{"location":"api/zone_controller/","text":"Functions \u00b6 getZones \u00b6 local zonesArray = ZoneController . getZones () getCharacterRegion \u00b6 local charRegion , regionCFrame , charSize = ZoneController . getCharacterRegion ( player ) getTouchingZones \u00b6 local touchingZonesArray = ZoneController . getTouchingZones ( player ) getHeightOfParts \u00b6 local height , minY , maxY = ZoneController . getHeightOfParts ( tableOfParts ) vectorIsBetweenYBounds \u00b6 local bool = ZoneController . vectorIsBetweenYBounds ( vector , tableOfParts ) verifyTouchingParts \u00b6 local bool = ZoneController . verifyTouchingParts ( vectors , tableOfParts )","title":"Zone controller"},{"location":"api/zone_controller/#functions","text":"","title":"Functions"},{"location":"api/zone_controller/#getzones","text":"local zonesArray = ZoneController . getZones ()","title":"getZones"},{"location":"api/zone_controller/#getcharacterregion","text":"local charRegion , regionCFrame , charSize = ZoneController . getCharacterRegion ( player )","title":"getCharacterRegion"},{"location":"api/zone_controller/#gettouchingzones","text":"local touchingZonesArray = ZoneController . getTouchingZones ( player )","title":"getTouchingZones"},{"location":"api/zone_controller/#getheightofparts","text":"local height , minY , maxY = ZoneController . getHeightOfParts ( tableOfParts )","title":"getHeightOfParts"},{"location":"api/zone_controller/#vectorisbetweenybounds","text":"local bool = ZoneController . vectorIsBetweenYBounds ( vector , tableOfParts )","title":"vectorIsBetweenYBounds"},{"location":"api/zone_controller/#verifytouchingparts","text":"local bool = ZoneController . verifyTouchingParts ( vectors , tableOfParts )","title":"verifyTouchingParts"}]}